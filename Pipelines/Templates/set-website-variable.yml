#We are going to set websiteId as a pipeline variable only if there is a Power Page in the Dataverse

parameters:
- name: serviceConnectionUrl
  type: string
  #In case of exporting Power Page, we expect that the solution unique name will be the same as the Power Page name (name field in a given WebSite record)
- name: solutionName
  type: string

steps:
- script: |
    echo "Portal Website provided as variable. Website ID - $(PowerPageWebsiteId)"
    echo "##vso[task.setvariable variable=WebsiteId;]$(PowerPageWebsiteId)"
  condition: ne(variables['PowerPageWebsiteId'], '')
  displayName: "Fetch Power Pages Website ID from Variable"

- pwsh: |
    Write-Host "Portal Website not provided as variable. Making API call."
    . "$env:POWERSHELLPATH/dataverse-webapi-functions.ps1"
    $dataverseHost = Get-HostFromUrl "${{parameters.serviceConnectionUrl}}"
    Write-Host "dataverseHost - $dataverseHost"
    # Fetch the Website by the 'Solution name'
    #$odataQuery = "adx_websites?`$filter=adx_name eq '${{parameters.solutionName}}'"    
    $odataQuery = "adx_websites?`$filter=contains(adx_name,'${{parameters.solutionName}}')"
    Write-Host "Portal odataQuery - $odataQuery"

    try{
        $response = Invoke-DataverseHttpGet $env:SPNTOKEN $dataverseHost $odataQuery
    }
    catch{
        Write-Host "Error: $($_.Exception.Message)"
        # if Power Pages solutions are not installed in Dataverse. adx_websites table will not be created. Suppres the error.
    }

    if($null -ne $response.value -and $response.value.count -gt 0){
        $websiteId = $response.value[0].adx_websiteid
        echo "##vso[task.setvariable variable=WebsiteId]$websiteId"
    }
    else{
        Write-Host "No sites found with the given solution name - ${{parameters.solutionName}}. Retry by correcting the solution name."
    }
  condition: eq(variables['PowerPageWebsiteId'], '')
  displayName: "Fetch Power Pages Website ID from Dataverse"